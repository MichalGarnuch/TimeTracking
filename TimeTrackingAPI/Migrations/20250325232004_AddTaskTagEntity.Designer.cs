// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTrackingAPI.Models;

#nullable disable

namespace TimeTrackingAPI.Migrations
{
    [DbContext(typeof(TimeTrackingDBContext))]
    [Migration("20250325232004_AddTaskTagEntity")]
    partial class AddTaskTagEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            

            modelBuilder.Entity("TimeTrackingAPI.Models.DepartmentEntity", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.EmployeeEntity", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.ProjectEntity", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectTypeID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.ProjectTypeEntity", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectType", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TagEntity", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TaskEntity", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TaskTagEntity", b =>
                {
                    b.Property<int>("TaskID")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int>("TagID")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("TaskID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("TaskTag", (string)null);
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TimeRecordEntity", b =>
                {
                    b.Property<int>("TimeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeRecordId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("HoursSpent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.HasKey("TimeRecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TimeRecord", (string)null);
                });


            modelBuilder.Entity("TimeTrackingAPI.Models.EmployeeEntity", b =>
                {
                    b.HasOne("TimeTrackingAPI.Models.DepartmentEntity", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.ProjectEntity", b =>
                {
                    b.HasOne("TimeTrackingAPI.Models.ProjectTypeEntity", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_ProjectType");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TaskEntity", b =>
                {
                    b.HasOne("TimeTrackingAPI.Models.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TaskTagEntity", b =>
                {
                    b.HasOne("TimeTrackingAPI.Models.TagEntity", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagID")
                        .IsRequired()
                        .HasConstraintName("FK_TaskTag_Tag");

                    b.HasOne("TimeTrackingAPI.Models.TaskEntity", "Task")
                        .WithMany("TaskTags")
                        .HasForeignKey("TaskID")
                        .IsRequired()
                        .HasConstraintName("FK_TaskTag_Task");

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TimeRecordEntity", b =>
                {
                    b.HasOne("TimeTrackingAPI.Models.EmployeeEntity", "Employee")
                        .WithMany("TimeRecords")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_TimeRecord_Employee");

                    b.HasOne("TimeTrackingAPI.Models.TaskEntity", "Task")
                        .WithMany("TimeRecords")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TimeRecord_Task");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.DepartmentEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.EmployeeEntity", b =>
                {
                    b.Navigation("TimeRecords");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.ProjectTypeEntity", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TagEntity", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("TimeTrackingAPI.Models.TaskEntity", b =>
                {
                    b.Navigation("TaskTags");

                    b.Navigation("TimeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
